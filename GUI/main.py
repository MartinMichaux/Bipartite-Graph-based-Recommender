import tkinter as tk
import tkinter.ttk as ttk
import csv
import re


def exit_application(element):
    element.quit()


def select_courses():
    window.withdraw()
    recomWindow.wm_deiconify()
    label = tk.Label(frame, text="Set score and reviews for the chosen courses:")
    label.pack(fill="both", expand=True)

    for c in chosen_courses:
        score = tk.Entry(frame, borderwidth=2, relief="groove")
        score.pack(padx=5, pady=5, ipadx=5, ipady=5, fill="both", expand=True)
        review = tk.Text(frame, relief="groove", padx=10, pady=5)
        review.pack(fill="both", expand=True)

    set_button = tk.Button(frame, text="Set reviews", command=set_data, bg="gray", fg="white")
    set_button.pack(side=tk.BOTTOM)

    recomWindow.protocol("WM_DELETE_WINDOW", exit_application(recomWindow))
    recomWindow.mainloop()

#for now this just goes back to the first window, it will have to be used to set the given scores and reviews in the future (and then move the user to the recommended courses view)
def set_data():
    window.wm_deiconify()
    recomWindow.withdraw()


def on_search(event):
    search_text = entry.get()
    suggestions = get_suggestions(search_text, course_names)
    update_suggestion_list(suggestions)


def get_suggestions(search_text, courses):
    #set a minimum of 3 characters before starting to look for matches
    if len(search_text) >= 3:

        matches = []
        for value in courses:
            pattern = re.compile(re.escape(search_text), re.IGNORECASE)
            if re.search(pattern, value):
                matches.append(value)
        return matches


def update_suggestion_list(suggestions):
    suggestion_list.delete(0, tk.END)  # Clear the current suggestion list
    if suggestions is not None:
        for value in suggestions:
            suggestion_list.insert(tk.END, value)


def on_listbox_click(event):
    selected_indices = suggestion_list.curselection()
    selected_values = [suggestion_list.get(index) for index in selected_indices]
    if selected_values not in chosen_courses:       #checks the course hasn't already been selected
        chosen_courses.append(selected_values)
    else:
        chosen_courses.remove(selected_values)      #deletes the course if it was
    save_selected_values(selected_values, chosen_courses)

#this will do actual stuff when there will be the code to connect to the graph
def save_selected_values(values, chosen_courses):
    # Perform the desired action with the selected values
    print("Selected values:", values)
    print("Chosen courses:", chosen_courses)

#will be used to check the score is a valid value
def validate_score(text):
    if text.isdigit() and 1 <= int(text) <= 5:
        return True
    else:
        return False


#will be used to keep the reviews under a specific word count (200 as a placeholder)
def validate_text_length(text):
    words = text.split()
    if len(words) <= 200:
        return True
    else:
        return False

# Open the CSV file containing course names
with open('../Coursera_courses.csv', 'r', encoding='utf-8') as file:
    reader = csv.DictReader(file)
    course_names = []

    # Access the values from the first column
    for row in reader:
        current_name = row['name']
        course_names.append(current_name)
        # print(course_names)

#window for course choice
window = tk.Tk()
window.geometry("800x600")
window.title("Scrappy GUI")
style = ttk.Style()
style.configure("Custom.TButton", background="blue", foreground="white", font=("Arial", 12))

button = tk.Button(window, text="Confirm course choice", command=select_courses, bg="gray", fg="white")
button.pack(side=tk.BOTTOM)

recomWindow = tk.Tk()
recomWindow.geometry("800x600")
recomWindow.title("Scrappy GUI - part 2")
recomWindow.withdraw()

# Create a Canvas widget to contain the text fields generated by the course choices and the scroll bar
canvas = tk.Canvas(recomWindow)
canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

# Create a Scrollbar and associate it with the Canvas
scrollbar = ttk.Scrollbar(recomWindow, orient=tk.VERTICAL, command=canvas.yview)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
canvas.configure(yscrollcommand=scrollbar.set)

# Configure the Canvas to resize with the window
canvas.bind('<Configure>', lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

# Create a Frame inside the Canvas to contain the entry and text widgets
frame = tk.Frame(canvas)
frame.pack(fill="both", expand=True)
canvas.create_window((0, 0), window=frame, anchor='nw')

#widget that dinamically updates whenever a key is released (i.e. a new character is added in the search bar)
entry = ttk.Entry(window)
entry.bind('<KeyRelease>', on_search)
entry.pack()

suggestion_list = tk.Listbox(window, height=8, width=60)
suggestion_list.pack(padx=5, pady=5, ipadx=5, ipady=5, fill="both", expand=True)
# TODO Important: clear the list after the "rate the courses" panel is shown, so it won't be already full next time (alternatively, clear it when back to the initial window
chosen_courses = []
suggestion_list.bind("<<ListboxSelect>>", on_listbox_click)

window.protocol("WM_DELETE_WINDOW", exit_application(window))
window.mainloop()
